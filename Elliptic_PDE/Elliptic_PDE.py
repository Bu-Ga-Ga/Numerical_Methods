import numpy as np

pi = np.pi
a = -0.5
eps = 0.1

x0, X = 0.0, 1.0
Y0, Y = 0.0, 1.0
N1, N2 = 10, 10
h1 = (X - x0) / (N1 - 1)
h2 = (Y - Y0) / (N2 - 1)

def f(x, y):
    return 1

def K(x, y):
    return np.array([[1.0, a], [a, 1.0]])

def multiply(A, vec):
    return np.dot(A, vec)

def norm(vec):
    return np.sum(vec**2)


def muk2(i, k2, r):
    res = 0.0
    for j in range(N2 - 2):
        res += r[i + j * (N1 - 2)] * np.sin(k2 * pi * (j + 1) / (N2 - 1))
    return res

def mu_k1_k2(ih1, k1, k2, r):
    res = 0.0
    for i in range(N1 - 2):
        res += muk2(i, k2, r) * np.sin(k1 * pi * (i + 1) / (N1 - 1))
    return res

def v_k2(i, k2, r):
    res = 0.0
    for k1 in range(1, N1 - 1):
        res += mu_k1_k2((i + 1) * h1, k1, k2, r) * np.sin(k1 * pi * (i + 1) / (N1 - 1)) / (
            (4 / (h1**2)) * np.sin(k1 * pi * h1 / (2 * (X - x0)))**2 +
            (4 / (h2**2)) * np.sin(k2 * pi * h2 / (2 * (Y - Y0)))**2
        )
    return res

def v(i, j, r):
    res = 0.0
    for k2 in range(1, N2 - 1):
        res += v_k2(i, k2, r) * np.sin(k2 * pi * (j + 1) / (N2 - 1))
    return res * 4 / ((N1 - 1) * (N2 - 1))

def main():
    N = (N1 - 2) * (N2 - 2)
    F = np.zeros(N)
    A = np.zeros((N, N))

    g = 0
    for j in range(N2 - 2):
        for i in range(N1 - 2):
            if i != 0 and j != 0 and i != N1 - 3 and j != N2 - 3:
                A[g, i + (N1 - 2) * j] = 0.5 * (
                    (2.0 * K(i * h1, j * h2)[0, 0] + K((i + 1) * h1, j * h2)[0, 0] + K((i - 1) * h1, j * h2)[0, 0]) / (h1**2) +
                    (2.0 * K(i * h1, j * h2)[1, 1] + K(i * h1, (j + 1) * h2)[1, 1] + K(i * h1, (j - 1) * h2)[1, 1]) / (h2**2) +
                    (K(i * h1, j * h2)[0, 1]) * 2.0 / (h1 * h2) +
                    (K(i * h1, j * h2)[1, 0] * 2.0) / (h1 * h2)
                )

                A[g, i + 1 + (N1 - 2) * j] = -0.5 * (
                    (K(i * h1, j * h2)[0, 0] + K((i + 1) * h1, j * h2)[0, 0]) / (h1**2) +
                    (K((i + 1) * h1, j * h2)[0, 1] / (h1 * h2)) +
                    (K(i * h1, j * h2)[0, 1] / (h1 * h2))
                )

                A[g, i - 1 + (N1 - 2) * j] = -0.5 * (
                    (K(i * h1, j * h2)[0, 0] + K((i - 1) * h1, j * h2)[0, 0]) / (h1**2) +
                    (K((i - 1) * h1, j * h2)[0, 1] / (h1 * h2)) +
                    (K(i * h1, j * h2)[1, 0] / (h1 * h2))
                )

                A[g, i + (N1 - 2) * (j + 1)] = -0.5 * (
                    (K(i * h1, j * h2)[1, 1] + K(i * h1, (j + 1) * h2)[0, 0]) / (h2**2) +
                    (K(i * h1, j * h2)[0, 1]) / (h1 * h2) +
                    (K(i * h1, (j + 1) * h2)[0, 1]) / (h1 * h2))
                

                A[g, i + (N1 - 2) * (j - 1)] = -0.5 * (
                    (K(i * h1, j * h2)[1, 1] + K(i * h1, (j - 1) * h2)[0, 0]) / (h2**2) +
                    (K(i * h1, j * h2)[0, 1]) / (h1 * h2) +
                    (K(i * h1, (j - 1) * h2)[1, 0]) / (h1 * h2))
                

                A[g, i + 1 + (N1 - 2) * (j - 1)] = -0.5 * (
                    -1 * K((i + 1) * h1, j * h2)[0, 1] / (h1 * h2) +
                    -1 * K(i * h1, (j - 1) * h2)[1, 0] / (h1 * h2))
                

                A[g, i - 1 + (N1 - 2) * (j + 1)] = -0.5 * (
                    -1 * K((i - 1) * h1, j * h2)[0, 1] / (h1 * h2) +
                    -1 * K(i * h1, (j + 1) * h2)[1, 0] / (h1 * h2))
                

                g += 1
                continue

            # Граничные случаи
            if i == 0 and j == 0:
                # Левый нижний угол
                A[g, i + (N1 - 2) * j] = 0.5 * (
                    (2.0 * K(i * h1, j * h2)[0, 0] + K((i + 1) * h1, j * h2)[0, 0] + K((i - 1) * h1, j * h2)[0, 0]) / (h1**2) +
                    (2.0 * K(i * h1, j * h2)[1, 1] + K(i * h1, (j + 1) * h2)[1, 1] + K(i * h1, (j - 1) * h2)[1, 1]) / (h2**2) +
                    (K(i * h1, j * h2)[0, 1]) * 2.0 / (h1 * h2) +
                    (K(i * h1, j * h2)[1, 0] * 2.0) / (h1 * h2)
                )

                A[g, i + 1 + (N1 - 2) * j] = -0.5 * (
                    (K(i * h1, j * h2)[0, 0] + K((i + 1) * h1, j * h2)[0, 0]) / (h1**2) +
                    (K((i + 1) * h1, j * h2)[0, 1] / (h1 * h2)) +
                    (K(i * h1, j * h2)[0, 1] / (h1 * h2))
                )

                A[g, i + (N1 - 2) * (j + 1)] = -0.5 * (
                    (K(i * h1, j * h2)[1, 1] + K(i * h1, (j + 1) * h2)[0, 0]) / (h2**2) +
                    (K(i * h1, j * h2)[0, 1]) / (h1 * h2) +
                    (K(i * h1, (j + 1) * h2)[0, 1]) / (h1 * h2))
                

                g += 1
                continue

            if i == 0 and j < N2 - 3:
                # Левая граница (не углы)
                A[g, i + (N1 - 2) * j] = 0.5 * (
                    (2.0 * K(i * h1, j * h2)[0, 0] + K((i + 1) * h1, j * h2)[0, 0] + K((i - 1) * h1, j * h2)[0, 0]) / (h1**2) +
                    (2.0 * K(i * h1, j * h2)[1, 1] + K(i * h1, (j + 1) * h2)[1, 1] + K(i * h1, (j - 1) * h2)[1, 1]) / (h2**2) +
                    (K(i * h1, j * h2)[0, 1]) * 2.0 / (h1 * h2) +
                    (K(i * h1, j * h2)[1, 0] * 2.0) / (h1 * h2)
                )

                A[g, i + 1 + (N1 - 2) * j] = -0.5 * (
                    (K(i * h1, j * h2)[0, 0] + K((i + 1) * h1, j * h2)[0, 0]) / (h1**2) +
                    (K((i + 1) * h1, j * h2)[0, 1] / (h1 * h2)) +
                    (K(i * h1, j * h2)[0, 1] / (h1 * h2))
                )

                A[g, i + (N1 - 2) * (j + 1)] = -0.5 * (
                    (K(i * h1, j * h2)[1, 1] + K(i * h1, (j + 1) * h2)[0, 0]) / (h2**2) +
                    (K(i * h1, j * h2)[0, 1]) / (h1 * h2) +
                    (K(i * h1, (j + 1) * h2)[0, 1]) / (h1 * h2))
                

                A[g, i + (N1 - 2) * (j - 1)] = -0.5 * (
                    (K(i * h1, j * h2)[1, 1] + K(i * h1, (j - 1) * h2)[0, 0]) / (h2**2) +
                    (K(i * h1, j * h2)[0, 1]) / (h1 * h2) +
                    (K(i * h1, (j - 1) * h2)[1, 0]) / (h1 * h2))
                

                A[g, i + 1 + (N1 - 2) * (j - 1)] = -0.5 * (
                    -1 * K((i + 1) * h1, j * h2)[0, 1] / (h1 * h2) +
                    -1 * K(i * h1, (j - 1) * h2)[1, 0] / (h1 * h2))
                

                g += 1
                continue

            if j == 0 and i < N1 - 3:
                # Нижняя граница (не углы)
                A[g, i + (N1 - 2) * j] = 0.5 * (
                    (2.0 * K(i * h1, j * h2)[0, 0] + K((i + 1) * h1, j * h2)[0, 0] + K((i - 1) * h1, j * h2)[0, 0]) / (h1**2) +
                    (2.0 * K(i * h1, j * h2)[1, 1] + K(i * h1, (j + 1) * h2)[1, 1] + K(i * h1, (j - 1) * h2)[1, 1]) / (h2**2) +
                    (K(i * h1, j * h2)[0, 1]) * 2.0 / (h1 * h2) +
                    (K(i * h1, j * h2)[1, 0] * 2.0) / (h1 * h2)
                )

                A[g, i + 1 + (N1 - 2) * j] = -0.5 * (
                    (K(i * h1, j * h2)[0, 0] + K((i + 1) * h1, j * h2)[0, 0]) / (h1**2) +
                    (K((i + 1) * h1, j * h2)[0, 1] / (h1 * h2)) +
                    (K(i * h1, j * h2)[0, 1] / (h1 * h2))
                )

                A[g, i - 1 + (N1 - 2) * j] = -0.5 * (
                    (K(i * h1, j * h2)[0, 0] + K((i - 1) * h1, j * h2)[0, 0]) / (h1**2) +
                    (K((i - 1) * h1, j * h2)[0, 1] / (h1 * h2)) +
                    (K(i * h1, j * h2)[1, 0] / (h1 * h2))
                )

                A[g, i + (N1 - 2) * (j + 1)] = -0.5 * (
                    (K(i * h1, j * h2)[1, 1] + K(i * h1, (j + 1) * h2)[0, 0]) / (h2**2) +
                    (K(i * h1, j * h2)[0, 1]) / (h1 * h2) +
                    (K(i * h1, (j + 1) * h2)[0, 1]) / (h1 * h2))
                

                A[g, i - 1 + (N1 - 2) * (j + 1)] = -0.5 * (
                    -1 * K((i - 1) * h1, j * h2)[0, 1] / (h1 * h2) +
                    -1 * K(i * h1, (j + 1) * h2)[1, 0] / (h1 * h2))
                

                g += 1
                continue

            if i == N1 - 3 and j == 0:
                # Правый нижний угол
                A[g, i + (N1 - 2) * j] = 0.5 * (
                    (2.0 * K(i * h1, j * h2)[0, 0] + K((i + 1) * h1, j * h2)[0, 0] + K((i - 1) * h1, j * h2)[0, 0]) / (h1**2) +
                    (2.0 * K(i * h1, j * h2)[1, 1] + K(i * h1, (j + 1) * h2)[1, 1] + K(i * h1, (j - 1) * h2)[1, 1]) / (h2**2) +
                    (K(i * h1, j * h2)[0, 1]) * 2.0 / (h1 * h2) +
                    (K(i * h1, j * h2)[1, 0] * 2.0) / (h1 * h2)
                )

                A[g, i - 1 + (N1 - 2) * j] = -0.5 * (
                    (K(i * h1, j * h2)[0, 0] + K((i - 1) * h1, j * h2)[0, 0]) / (h1**2) +
                    (K((i - 1) * h1, j * h2)[0, 1] / (h1 * h2)) +
                    (K(i * h1, j * h2)[1, 0] / (h1 * h2))
                )

                A[g, i + (N1 - 2) * (j + 1)] = -0.5 * (
                    (K(i * h1, j * h2)[1, 1] + K(i * h1, (j + 1) * h2)[0, 0]) / (h2**2) +
                    (K(i * h1, j * h2)[0, 1]) / (h1 * h2) +
                    (K(i * h1, (j + 1) * h2)[0, 1]) / (h1 * h2))
                

                A[g, i - 1 + (N1 - 2) * (j + 1)] = -0.5 * (
                    -1 * K((i - 1) * h1, j * h2)[0, 1] / (h1 * h2) +
                    -1 * K(i * h1, (j + 1) * h2)[1, 0] / (h1 * h2))
                

                g += 1
                continue

            if i == 0 and j == N2 - 3:
                # Левый верхний угол
                A[g, i + (N1 - 2) * j] = 0.5 * (
                    (2.0 * K(i * h1, j * h2)[0, 0] + K((i + 1) * h1, j * h2)[0, 0] + K((i - 1) * h1, j * h2)[0, 0]) / (h1**2) +
                    (2.0 * K(i * h1, j * h2)[1, 1] + K(i * h1, (j + 1) * h2)[1, 1] + K(i * h1, (j - 1) * h2)[1, 1]) / (h2**2) +
                    (K(i * h1, j * h2)[0, 1]) * 2.0 / (h1 * h2) +
                    (K(i * h1, j * h2)[1, 0] * 2.0) / (h1 * h2)
                )

                A[g, i + 1 + (N1 - 2) * j] = -0.5 * (
                    (K(i * h1, j * h2)[0, 0] + K((i + 1) * h1, j * h2)[0, 0]) / (h1**2) +
                    (K((i + 1) * h1, j * h2)[0, 1] / (h1 * h2)) +
                    (K(i * h1, j * h2)[0, 1] / (h1 * h2))
                )

                A[g, i + (N1 - 2) * (j - 1)] = -0.5 * (
                    (K(i * h1, j * h2)[1, 1] + K(i * h1, (j - 1) * h2)[0, 0]) / (h2**2) +
                    (K(i * h1, j * h2)[0, 1]) / (h1 * h2) +
                    (K(i * h1, (j - 1) * h2)[1, 0]) / (h1 * h2))
                

                A[g, i + 1 + (N1 - 2) * (j - 1)] = -0.5 * (
                    -1 * K((i + 1) * h1, j * h2)[0, 1] / (h1 * h2) +
                    -1 * K(i * h1, (j - 1) * h2)[1, 0] / (h1 * h2))
                

                g += 1
                continue

            if i > 0 and j == N2 - 3 and i != N1 - 3:
                # Верхняя граница (не углы)
                A[g, i + (N1 - 2) * j] = 0.5 * (
                    (2.0 * K(i * h1, j * h2)[0, 0] + K((i + 1) * h1, j * h2)[0, 0] + K((i - 1) * h1, j * h2)[0, 0]) / (h1**2) +
                    (2.0 * K(i * h1, j * h2)[1, 1] + K(i * h1, (j + 1) * h2)[1, 1] + K(i * h1, (j - 1) * h2)[1, 1]) / (h2**2) +
                    (K(i * h1, j * h2)[0, 1]) * 2.0 / (h1 * h2) +
                    (K(i * h1, j * h2)[1, 0] * 2.0) / (h1 * h2)
                )

                A[g, i + 1 + (N1 - 2) * j] = -0.5 * (
                    (K(i * h1, j * h2)[0, 0] + K((i + 1) * h1, j * h2)[0, 0]) / (h1**2) +
                    (K((i + 1) * h1, j * h2)[0, 1] / (h1 * h2)) +
                    (K(i * h1, j * h2)[0, 1] / (h1 * h2))
                )

                A[g, i - 1 + (N1 - 2) * j] = -0.5 * (
                    (K(i * h1, j * h2)[0, 0] + K((i - 1) * h1, j * h2)[0, 0]) / (h1**2) +
                    (K((i - 1) * h1, j * h2)[0, 1] / (h1 * h2)) +
                    (K(i * h1, j * h2)[1, 0] / (h1 * h2))
                )

                A[g, i + (N1 - 2) * (j - 1)] = -0.5 * (
                    (K(i * h1, j * h2)[1, 1] + K(i * h1, (j - 1) * h2)[0, 0]) / (h2**2) +
                    (K(i * h1, j * h2)[0, 1]) / (h1 * h2) +
                    (K(i * h1, (j - 1) * h2)[1, 0]) / (h1 * h2))
                

                A[g, i + 1 + (N1 - 2) * (j - 1)] = -0.5 * (
                    -1 * K((i + 1) * h1, j * h2)[0, 1] / (h1 * h2) +
                    -1 * K(i * h1, (j - 1) * h2)[1, 0] / (h1 * h2))
                

                g += 1
                continue

            if j > 0 and i == N1 - 3 and j != N2 - 3:
                # Правая граница (не углы)
                A[g, i + (N1 - 2) * j] = 0.5 * (
                    (2.0 * K(i * h1, j * h2)[0, 0] + K((i + 1) * h1, j * h2)[0, 0] + K((i - 1) * h1, j * h2)[0, 0]) / (h1**2) +
                    (2.0 * K(i * h1, j * h2)[1, 1] + K(i * h1, (j + 1) * h2)[1, 1] + K(i * h1, (j - 1) * h2)[1, 1]) / (h2**2) +
                    (K(i * h1, j * h2)[0, 1]) * 2.0 / (h1 * h2) +
                    (K(i * h1, j * h2)[1, 0] * 2.0) / (h1 * h2)
                )

                A[g, i - 1 + (N1 - 2) * j] = -0.5 * (
                    (K(i * h1, j * h2)[0, 0] + K((i - 1) * h1, j * h2)[0, 0]) / (h1**2) +
                    (K((i - 1) * h1, j * h2)[0, 1] / (h1 * h2)) +
                    (K(i * h1, j * h2)[1, 0] / (h1 * h2))
                )

                A[g, i + (N1 - 2) * (j + 1)] = -0.5 * (
                    (K(i * h1, j * h2)[1, 1] + K(i * h1, (j + 1) * h2)[0, 0]) / (h2**2) +
                    (K(i * h1, j * h2)[0, 1]) / (h1 * h2) +
                    (K(i * h1, (j + 1) * h2)[0, 1]) / (h1 * h2))
                

                A[g, i + (N1 - 2) * (j - 1)] = -0.5 * (
                    (K(i * h1, j * h2)[1, 1] + K(i * h1, (j - 1) * h2)[0, 0]) / (h2**2) +
                    (K(i * h1, j * h2)[0, 1]) / (h1 * h2) +
                    (K(i * h1, (j - 1) * h2)[1, 0]) / (h1 * h2))
                

                A[g, i - 1 + (N1 - 2) * (j + 1)] = -0.5 * (
                    -1 * K((i - 1) * h1, j * h2)[0, 1] / (h1 * h2) +
                    -1 * K(i * h1, (j + 1) * h2)[1, 0] / (h1 * h2))
                

                g += 1
                continue

            if i == N1 - 3 and j == N2 - 3:
                # Правый верхний угол
                A[g, i + (N1 - 2) * j] = 0.5 * (
                    (2.0 * K(i * h1, j * h2)[0, 0] + K((i + 1) * h1, j * h2)[0, 0] + K((i - 1) * h1, j * h2)[0, 0]) / (h1**2) +
                    (2.0 * K(i * h1, j * h2)[1, 1] + K(i * h1, (j + 1) * h2)[1, 1] + K(i * h1, (j - 1) * h2)[1, 1]) / (h2**2) +
                    (K(i * h1, j * h2)[0, 1]) * 2.0 / (h1 * h2) +
                    (K(i * h1, j * h2)[1, 0] * 2.0) / (h1 * h2)
                )

                A[g, i - 1 + (N1 - 2) * j] = -0.5 * (
                    (K(i * h1, j * h2)[0, 0] + K((i - 1) * h1, j * h2)[0, 0]) / (h1**2) +
                    (K((i - 1) * h1, j * h2)[0, 1] / (h1 * h2)) +
                    (K(i * h1, j * h2)[1, 0] / (h1 * h2))
                )

                A[g, i + (N1 - 2) * (j - 1)] = -0.5 * (
                    (K(i * h1, j * h2)[1, 1] + K(i * h1, (j - 1) * h2)[0, 0]) / (h2**2) +
                    (K(i * h1, j * h2)[0, 1]) / (h1 * h2) +
                    (K(i * h1, (j - 1) * h2)[1, 0]) / (h1 * h2))
                

                g += 1
                continue

    for j in range(N2 - 2):
        for i in range(N1 - 2):
            F[i + (N1 - 2) * j] = f((i + 1) * h1, (j + 1) * h2)

    r = np.ones(N)
    v_n = np.zeros(N)
    count = 0

    while norm(r) > eps:
        cur1 = multiply(A, v_n)
        r = cur1 - F

        tn = np.zeros(N)
        for j in range(N2 - 2):
            for i in range(N1 - 2):
                tn[i + (N1 - 2) * j] = v(i, j, r)

        alph = np.sum(r * tn)
        cur = np.sum(multiply(A, tn) * tn)
        alph = alph / cur

        v_n = v_n - alph * tn
        count += 1
        print(norm(r), '\n')
        print(v_n)

    print(f"num iterations: {count}")

if __name__ == "__main__":
    main()
